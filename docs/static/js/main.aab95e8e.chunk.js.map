{"version":3,"sources":["data/genes.ts","App.tsx","data/flowericonpaths.ts","serviceWorker.ts","index.tsx"],"names":["FlowerNames","Blockers","SeedGenes","windflower","mum","tulip","hyacinth","pansy","lily","cosmos","rose","Genes","FlowerIconPaths","FlowerIcon","props","path","getFlowerPath","flower","FlowerImg","src","set","species","resolveFlowerColor","Object","values","genes","slice","MainContainer","styled","div","FlowerSpeciesOption","active","css","FlowerSpeciesChoice","FlowerColorChoice","Tools","img","slamIn","keyframes","BlockImage","bounceIn","Cell","FieldEl","Row","MinusPlusButton","PlusButton","App","useState","fieldWidth","setFieldWidth","fieldHeight","setFieldHeight","undefined","isBlocking","setIsBlocking","flowerSpecies","setFlowerSpecies","flowerGenes","setFlowerGenes","field","setField","blockField","setBlockField","rows","x","row","y","push","flowerOptions","keys","map","k","Number","colorOptions","entries","reduce","c","n","onClickCell","rowIndex","colIndex","newBlockField","newField","currentColor","alt","title","style","width","background","LILYOFTHEVALLEY","onClick","PAVEMENT","Math","max","min","f","key","colorItem","_","content","blockerType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aab95e8e.chunk.js","sourcesContent":["export enum FlowerNames {\r\n  rose,\r\n  cosmos,\r\n  lily,\r\n  pansy,\r\n  hyacinth,\r\n  tulip,\r\n  mum,\r\n  windflower,\r\n}\r\n\r\nexport const SeedGenes: {\r\n  [key: number]: { [key: string]: string }\r\n} = {\r\n  [FlowerNames.windflower]: {\r\n    'white': '01 00 00 01',\r\n    'orange': '00 00 11 00',\r\n    'red': '00 11 00 00',\r\n  },\r\n  [FlowerNames.mum]: {\r\n    'white': '01 00 00 01',\r\n    'yellow': '00 00 11 00',\r\n    'red': '00 11 00 00',\r\n  },\r\n  [FlowerNames.tulip]: {\r\n    'white': '01 00 00 01',\r\n    'yellow': '00 00 11 00',\r\n    'red': '01 11 00 01',\r\n  },\r\n  [FlowerNames.hyacinth]: {\r\n    'white': '01 00 00 01',\r\n    'yellow': '00 00 11 00',\r\n    'red': '01 11 00 01',\r\n  },\r\n  [FlowerNames.pansy]: {\r\n    'white': '01 00 00 01',\r\n    'yellow': '00 00 11 00',\r\n    'red': '00 11 00 00',\r\n  },\r\n  [FlowerNames.lily]: {\r\n    'white': '11 00 00 11',\r\n    'yellow': '00 00 11 00',\r\n    'red': '01 11 00 01',\r\n  },\r\n  [FlowerNames.cosmos]: {\r\n    'white': '01 00 00 01',\r\n    'yellow': '01 00 11 01',\r\n    'red': '00 11 00 00',\r\n  },\r\n  [FlowerNames.rose]: {\r\n    'white': '00 00 01 00',\r\n    'yellow': '00 11 00 00',\r\n    'red': '11 00 00 01',\r\n  },\r\n};\r\n\r\ninterface GeneDataInterface {\r\n  [key: number]: { [key: string]: string }\r\n}\r\nexport const Genes: GeneDataInterface = {\r\n  [FlowerNames.windflower]: {\r\n    '00 00 00': 'white',\r\n    '00 00 01': 'white',\r\n    '00 00 11': 'blue',\r\n    '00 01 00': 'orange',\r\n    '00 01 01': 'orange',\r\n    '00 01 11': 'blue',\r\n    '00 11 00': 'orange',\r\n    '00 11 01': 'orange',\r\n    '00 11 11': 'orange',\r\n    '01 00 00': 'red',\r\n    '01 00 01': 'red',\r\n    '01 00 11': 'blue',\r\n    '01 01 00': 'pink',\r\n    '01 01 01': 'pink',\r\n    '01 01 11': 'pink',\r\n    '01 11 00': 'orange',\r\n    '01 11 01': 'orange',\r\n    '01 11 11': 'orange',\r\n    '11 00 00': 'red',\r\n    '11 00 01': 'red',\r\n    '11 00 11': 'purple',\r\n    '11 01 00': 'red',\r\n    '11 01 01': 'red',\r\n    '11 01 11': 'purple',\r\n    '11 11 00': 'pink',\r\n    '11 11 01': 'pink',\r\n    '11 11 11': 'purple',\r\n  },\r\n  [FlowerNames.mum]: {\r\n    '00 00 00': 'white',\r\n    '00 00 01': 'white',\r\n    '00 00 11': 'purple',\r\n    '00 01 00': 'yellow',\r\n    '00 01 01': 'yellow',\r\n    '00 01 11': 'white',\r\n    '00 11 00': 'yellow',\r\n    '00 11 01': 'yellow',\r\n    '00 11 11': 'yellow',\r\n    '01 00 00': 'pink',\r\n    '01 00 01': 'pink',\r\n    '01 00 11': 'pink',\r\n    '01 01 00': 'yellow',\r\n    '01 01 01': 'red',\r\n    '01 01 11': 'pink',\r\n    '01 11 00': 'purple',\r\n    '01 11 01': 'purple',\r\n    '01 11 11': 'purple',\r\n    '11 00 00': 'red',\r\n    '11 00 01': 'red',\r\n    '11 00 11': 'red',\r\n    '11 01 00': 'purple',\r\n    '11 01 01': 'purple',\r\n    '11 01 11': 'red',\r\n    '11 11 00': 'green',\r\n    '11 11 01': 'green',\r\n    '11 11 11': 'red',\r\n  },\r\n  [FlowerNames.tulip]: {\r\n    '00 00 00': 'white',\r\n    '00 00 01': 'white',\r\n    '00 00 11': 'white',\r\n    '00 01 00': 'yellow',\r\n    '00 01 01': 'yellow',\r\n    '00 01 11': 'white',\r\n    '00 11 00': 'yellow',\r\n    '00 11 01': 'yellow',\r\n    '00 11 11': 'yellow',\r\n    '01 00 00': 'red',\r\n    '01 00 01': 'pink',\r\n    '01 00 11': 'white',\r\n    '01 01 00': 'orange',\r\n    '01 01 01': 'yellow',\r\n    '01 01 11': 'yellow',\r\n    '01 11 00': 'orange',\r\n    '01 11 01': 'yellow',\r\n    '01 11 11': 'yellow',\r\n    '11 00 00': 'black',\r\n    '11 00 01': 'red',\r\n    '11 00 11': 'red',\r\n    '11 01 00': 'black',\r\n    '11 01 01': 'red',\r\n    '11 01 11': 'red',\r\n    '11 11 00': 'purple',\r\n    '11 11 01': 'purple',\r\n    '11 11 11': 'purple',\r\n  },\r\n  [FlowerNames.hyacinth]: {\r\n    '00 00 00': 'white',\r\n    '00 00 01': 'white',\r\n    '00 00 11': 'blue',\r\n    '00 01 00': 'yellow',\r\n    '00 01 01': 'yellow',\r\n    '00 01 11': 'white',\r\n    '00 11 00': 'yellow',\r\n    '00 11 01': 'yellow',\r\n    '00 11 11': 'yellow',\r\n    '01 00 00': 'red',\r\n    '01 00 01': 'pink',\r\n    '01 00 11': 'white',\r\n    '01 01 00': 'orange',\r\n    '01 01 01': 'yellow',\r\n    '01 01 11': 'yellow',\r\n    '01 11 00': 'orange',\r\n    '01 11 01': 'yellow',\r\n    '01 11 11': 'yellow',\r\n    '11 00 00': 'red',\r\n    '11 00 01': 'red',\r\n    '11 00 11': 'red',\r\n    '11 01 00': 'blue',\r\n    '11 01 01': 'red',\r\n    '11 01 11': 'red',\r\n    '11 11 00': 'purple',\r\n    '11 11 01': 'purple',\r\n    '11 11 11': 'purple',\r\n  },\r\n  [FlowerNames.pansy]: {\r\n    '00 00 00': 'white',\r\n    '00 00 01': 'white',\r\n    '00 00 11': 'blue',\r\n    '00 01 00': 'yellow',\r\n    '00 01 01': 'yellow',\r\n    '00 01 11': 'blue',\r\n    '00 11 00': 'yellow',\r\n    '00 11 01': 'yellow',\r\n    '00 11 11': 'yellow',\r\n    '01 00 00': 'red',\r\n    '01 00 01': 'red',\r\n    '01 00 11': 'blue',\r\n    '01 01 00': 'orange',\r\n    '01 01 01': 'orange',\r\n    '01 01 11': 'orange',\r\n    '01 11 00': 'yellow',\r\n    '01 11 01': 'yellow',\r\n    '01 11 11': 'yellow',\r\n    '11 00 00': 'red',\r\n    '11 00 01': 'red',\r\n    '11 00 11': 'purple',\r\n    '11 01 00': 'red',\r\n    '11 01 01': 'red',\r\n    '11 01 11': 'purple',\r\n    '11 11 00': 'orange',\r\n    '11 11 01': 'orange',\r\n    '11 11 11': 'purple',\r\n  },\r\n  [FlowerNames.lily]: {\r\n    '00 00 00': 'white',\r\n    '00 00 01': 'white',\r\n    '00 00 11': 'white',\r\n    '00 01 00': 'yellow',\r\n    '00 01 01': 'white',\r\n    '00 01 11': 'white',\r\n    '00 11 00': 'yellow',\r\n    '00 11 01': 'yellow',\r\n    '00 11 11': 'white',\r\n    '01 00 00': 'red',\r\n    '01 00 01': 'pink',\r\n    '01 00 11': 'white',\r\n    '01 01 00': 'orange',\r\n    '01 01 01': 'yellow',\r\n    '01 01 11': 'yellow',\r\n    '01 11 00': 'orange',\r\n    '01 11 01': 'yellow',\r\n    '01 11 11': 'yellow',\r\n    '11 00 00': 'black',\r\n    '11 00 01': 'red',\r\n    '11 00 11': 'pink',\r\n    '11 01 00': 'black',\r\n    '11 01 01': 'red',\r\n    '11 01 11': 'pink',\r\n    '11 11 00': 'orange',\r\n    '11 11 01': 'orange',\r\n    '11 11 11': 'white',\r\n  },\r\n  [FlowerNames.cosmos]: {\r\n    '00 00 00': 'white',\r\n    '00 00 01': 'white',\r\n    '00 00 11': 'white',\r\n    '00 01 00': 'yellow',\r\n    '00 01 01': 'yellow',\r\n    '00 01 11': 'white',\r\n    '00 11 00': 'yellow',\r\n    '00 11 01': 'yellow',\r\n    '00 11 11': 'yellow',\r\n    '01 00 00': 'pink',\r\n    '01 00 01': 'pink',\r\n    '01 00 11': 'pink',\r\n    '01 01 00': 'orange',\r\n    '01 01 01': 'orange',\r\n    '01 01 11': 'pink',\r\n    '01 11 00': 'orange',\r\n    '01 11 01': 'orange',\r\n    '01 11 11': 'orange',\r\n    '11 00 00': 'red',\r\n    '11 00 01': 'red',\r\n    '11 00 11': 'red',\r\n    '11 01 00': 'orange',\r\n    '11 01 01': 'orange',\r\n    '11 01 11': 'red',\r\n    '11 11 00': 'black',\r\n    '11 11 01': 'black',\r\n    '11 11 11': 'red',\r\n  },\r\n  [FlowerNames.rose]: {\r\n    '00 00 00 00': 'white',\r\n    '00 00 00 01': 'white',\r\n    '00 00 00 11': 'white',\r\n    '00 00 01 00': 'white',\r\n    '00 00 01 01': 'white',\r\n    '00 00 01 11': 'white',\r\n    '00 00 11 00': 'purple',\r\n    '00 00 11 01': 'purple',\r\n    '00 00 11 11': 'purple',\r\n    '00 01 00 00': 'yellow',\r\n    '00 01 00 01': 'yellow',\r\n    '00 01 00 11': 'yellow',\r\n    '00 01 01 00': 'white',\r\n    '00 01 01 01': 'white',\r\n    '00 01 01 11': 'white',\r\n    '00 01 11 00': 'purple',\r\n    '00 01 11 01': 'purple',\r\n    '00 01 11 11': 'purple',\r\n    '00 11 00 00': 'yellow',\r\n    '00 11 00 01': 'yellow',\r\n    '00 11 00 11': 'yellow',\r\n    '00 11 01 00': 'yellow',\r\n    '00 11 01 01': 'yellow',\r\n    '00 11 01 11': 'yellow',\r\n    '00 11 11 00': 'white',\r\n    '00 11 11 01': 'white',\r\n    '00 11 11 11': 'white',\r\n    '01 00 00 00': 'red',\r\n    '01 00 00 01': 'pink',\r\n    '01 00 00 11': 'white',\r\n    '01 00 01 00': 'red',\r\n    '01 00 01 01': 'pink',\r\n    '01 00 01 11': 'white',\r\n    '01 00 11 00': 'red',\r\n    '01 00 11 01': 'pink',\r\n    '01 00 11 11': 'purple',\r\n    '01 01 00 00': 'orange',\r\n    '01 01 00 01': 'yellow',\r\n    '01 01 00 11': 'yellow',\r\n    '01 01 01 00': 'red',\r\n    '01 01 01 01': 'pink',\r\n    '01 01 01 11': 'white',\r\n    '01 01 11 00': 'red',\r\n    '01 01 11 01': 'pink',\r\n    '01 01 11 11': 'purple',\r\n    '01 11 00 00': 'orange',\r\n    '01 11 00 01': 'yellow',\r\n    '01 11 00 11': 'yellow',\r\n    '01 11 01 00': 'orange',\r\n    '01 11 01 01': 'yellow',\r\n    '01 11 01 11': 'yellow',\r\n    '01 11 11 00': 'red',\r\n    '01 11 11 01': 'pink',\r\n    '01 11 11 11': 'white',\r\n    '11 00 00 00': 'black',\r\n    '11 00 00 01': 'red',\r\n    '11 00 00 11': 'pink',\r\n    '11 00 01 00': 'black',\r\n    '11 00 01 01': 'red',\r\n    '11 00 01 11': 'pink',\r\n    '11 00 11 00': 'black',\r\n    '11 00 11 01': 'red',\r\n    '11 00 11 11': 'pink',\r\n    '11 01 00 00': 'orange',\r\n    '11 01 00 01': 'orange',\r\n    '11 01 00 11': 'yellow',\r\n    '11 01 01 00': 'red',\r\n    '11 01 01 01': 'red',\r\n    '11 01 01 11': 'white',\r\n    '11 01 11 00': 'black',\r\n    '11 01 11 01': 'red',\r\n    '11 01 11 11': 'purple',\r\n    '11 11 00 00': 'orange',\r\n    '11 11 00 01': 'orange',\r\n    '11 11 00 11': 'yellow',\r\n    '11 11 01 00': 'orange',\r\n    '11 11 01 01': 'orange',\r\n    '11 11 01 11': 'yellow',\r\n    '11 11 11 00': 'blue',\r\n    '11 11 11 01': 'red',\r\n    '11 11 11 11': 'white',\r\n  }\r\n};\r\n","import React, { useState } from 'react';\r\nimport styled, { css, keyframes } from 'styled-components';\r\n\r\nimport { FlowerNames, Genes, SeedGenes } from './data/genes';\r\nimport { FlowerIconPaths } from './data/flowericonpaths';\r\n\r\ninterface Field {\r\n  [key: number]: {\r\n    [key: number]: Flower | undefined\r\n  }\r\n}\r\ninterface BlockField {\r\n  [key: number]: {\r\n    [key: number]: Blockers\r\n  }\r\n}\r\n\r\nenum Blockers {\r\n  PAVEMENT,\r\n  LILYOFTHEVALLEY,\r\n}\r\ninterface Flower {\r\n  species: FlowerNames\r\n  genes: string\r\n}\r\n\r\nconst cellSize = 50;\r\n\r\nfunction App() {\r\n  const [fieldWidth, setFieldWidth] = useState(10);\r\n  const [fieldHeight, setFieldHeight] = useState(10);\r\n\r\n  const [isBlocking, setIsBlocking] = useState(undefined as Blockers | undefined);\r\n  const [flowerSpecies, setFlowerSpecies] = useState(FlowerNames.rose);\r\n  const [flowerGenes, setFlowerGenes] = useState('11 112 11 00');\r\n  const [field, setField] = useState({} as Field);\r\n  const [blockField, setBlockField] = useState({} as BlockField);\r\n  const rows = [];\r\n  for (let x = 0; x < fieldHeight; x++) {\r\n    const row = [];\r\n    for (let y = 0; y < fieldWidth; y++){ \r\n      row.push(1);\r\n    }\r\n    rows.push(row);\r\n  }\r\n\r\n  const flowerOptions = Object.keys(SeedGenes).map(k => Number(k) as FlowerNames);\r\n  const colorOptions: { [key: string]: string } = Object.entries(Genes[flowerSpecies]).reduce((c, n) => {\r\n    if (!c[n[1]]) {\r\n      c[n[1]] = n[0];\r\n    }\r\n    return c;\r\n  }, {} as { [key: string]: string });\r\n\r\n  const onClickCell = (rowIndex: number, colIndex: number) => {\r\n    return () => {\r\n      if (isBlocking !== undefined) {\r\n        const newBlockField = {...blockField};\r\n        if (!newBlockField[rowIndex]) {\r\n          newBlockField[rowIndex] = {};\r\n        }\r\n        if (!newBlockField[rowIndex][colIndex]) {\r\n          newBlockField[rowIndex][colIndex] = isBlocking;\r\n        } else {\r\n          delete newBlockField[rowIndex][colIndex];\r\n        }\r\n        setBlockField(newBlockField);\r\n      } else {\r\n        const newField = {...field};\r\n        if (!newField[rowIndex]) {\r\n          newField[rowIndex] = {};\r\n        }\r\n        if (!newField[rowIndex][colIndex]) {\r\n          newField[rowIndex][colIndex] = {\r\n            species: flowerSpecies,\r\n            genes: flowerGenes,\r\n          };\r\n        } else {\r\n          newField[rowIndex][colIndex] = undefined;\r\n        }\r\n        setField(newField);\r\n      }\r\n    };\r\n  };\r\n\r\n  const currentColor = resolveFlowerColor({\r\n    species: flowerSpecies,\r\n    genes: flowerGenes,\r\n  });\r\n  return <MainContainer>\r\n    <Tools>\r\n      <img\r\n        alt={'Set lily of the valley'}\r\n        title={'Set lily of the valley'}\r\n        style={{\r\n          width: 48,\r\n          background: isBlocking === Blockers.LILYOFTHEVALLEY ? 'rgba(255, 255, 255, 0.5)' : '',\r\n        }}\r\n        src={'img/Suzuran_w.png'}\r\n        onClick={() => {\r\n          setIsBlocking(isBlocking === Blockers.LILYOFTHEVALLEY ? undefined : Blockers.LILYOFTHEVALLEY);\r\n        }}\r\n      />\r\n      <img\r\n        alt={'Set pavement'}\r\n        title={'Set pavement'}\r\n        style={{\r\n          width: 48,\r\n          background: isBlocking === Blockers.PAVEMENT ? 'rgba(255, 255, 255, 0.5)' : '',\r\n        }}\r\n        src={'img/Icon_GeneralCloth_00^t.png'}\r\n        onClick={() => {\r\n          setIsBlocking(isBlocking === Blockers.PAVEMENT ? undefined : Blockers.PAVEMENT);\r\n        }}\r\n      />\r\n      <img\r\n        alt={'Clear field'}\r\n        title={'Clear field'}\r\n        style={{ width: 48 }}\r\n        src={'img/ProfileReplaceIcon^t.png'}\r\n        onClick={() => {\r\n          setField({});\r\n          setBlockField({});\r\n        }}\r\n      />\r\n      <MinusPlusButton\r\n        title={'Shrink field'}\r\n        onClick={() => {\r\n          setFieldWidth(Math.max(3, fieldWidth - 1));\r\n          setFieldHeight(Math.max(3, fieldHeight - 1));\r\n        }}\r\n      />\r\n      <PlusButton\r\n        title={'Enlarge field'}\r\n        onClick={() => {\r\n          setFieldWidth(Math.min(99, fieldWidth + 1));\r\n          setFieldHeight(Math.min(99, fieldHeight + 1));\r\n        }}\r\n      />\r\n    </Tools>\r\n    <Tools>\r\n      <FlowerSpeciesChoice>\r\n        {flowerOptions.map(f => {\r\n          return <FlowerSpeciesOption\r\n            key={f}\r\n            onClick={() => {\r\n              setFlowerSpecies(f);\r\n              setIsBlocking(undefined);\r\n            }}\r\n            active={f === flowerSpecies}\r\n          >\r\n            <FlowerIcon\r\n              flower={{\r\n                species: f,\r\n                genes: '',\r\n              }}\r\n            />\r\n          </FlowerSpeciesOption>;\r\n        })}\r\n      </FlowerSpeciesChoice>\r\n      <FlowerColorChoice>\r\n        {Object.entries(colorOptions).map(colorItem => {\r\n          return <FlowerSpeciesOption\r\n            key={colorItem[0]}\r\n            onClick={() => {\r\n              setFlowerGenes(colorItem[1]);\r\n              setIsBlocking(undefined);\r\n            }}\r\n            active={colorItem[0] === currentColor}\r\n          >\r\n            <FlowerIcon\r\n              flower={{\r\n                species: flowerSpecies,\r\n                genes: colorItem[1],\r\n              }}\r\n            />\r\n          </FlowerSpeciesOption>;\r\n        })}\r\n      </FlowerColorChoice>\r\n    </Tools>\r\n    <FieldEl style={{\r\n      width: `${cellSize * fieldWidth}px`\r\n    }}>\r\n      {rows.map((row, rowIndex) => {\r\n        return <Row key={rowIndex}>\r\n          {row.map((_, colIndex) => {\r\n            const content = field[rowIndex]?.[colIndex];\r\n            const blockerType = blockField[rowIndex]?.[colIndex];\r\n            return <Cell\r\n              key={colIndex}\r\n              onClick={onClickCell(rowIndex, colIndex)}\r\n            >\r\n              {!blockerType && content && <FlowerIcon\r\n                flower={content}\r\n              />}\r\n              {blockerType === Blockers.PAVEMENT && <BlockImage\r\n                src={'img/RoadTexC^_A.png'}\r\n              />}\r\n              {blockerType === Blockers.LILYOFTHEVALLEY && <BlockImage\r\n                src={'img/Suzuran.png'}\r\n              />}\r\n            </Cell>;\r\n          })}\r\n        </Row>;\r\n      })}\r\n    </FieldEl>\r\n  </MainContainer>;\r\n}\r\n\r\ninterface FlowerIconProps {\r\n  flower: Flower\r\n}\r\n\r\nconst FlowerIcon = (props: FlowerIconProps) => {\r\n  const path = getFlowerPath(props.flower);\r\n  return <div>\r\n    <FlowerImg src={path}/>\r\n  </div>;\r\n}; \r\n\r\nconst getFlowerPath = (flower: Flower) => {\r\n  const set = FlowerIconPaths[flower.species];\r\n  const color = resolveFlowerColor(flower);\r\n  return set[color] || Object.values(set)[0];\r\n};\r\n\r\nconst resolveFlowerColor = (flower: Flower) => {\r\n  const geneSet = Genes[flower.species];\r\n  const gene =  flower.species === FlowerNames.rose ? flower.genes : flower.genes.slice(-8);\r\n  return geneSet[gene];\r\n};\r\n\r\nconst MainContainer = styled.div`\r\n  margin: 8px 0;\r\n`;\r\n\r\ninterface FlowerSpeciesOptionProps {\r\n  active?: boolean\r\n}\r\nconst FlowerSpeciesOption = styled.div<FlowerSpeciesOptionProps>`\r\n  cursor: pointer;\r\n  transition: transform 0.1s;\r\n  border-radius: 4px;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n  ${({ active }) => active && css`\r\n    background: rgba(255, 255, 255, 0.3);\r\n  `}\r\n`;\r\n\r\nconst FlowerSpeciesChoice = styled.div`\r\n  margin-bottom: 12px;\r\n  > div {\r\n    display: inline-block;\r\n    width: 60px;\r\n  }\r\n`;\r\n\r\nconst FlowerColorChoice = styled.div`\r\n  margin-bottom: 12px;\r\n  > div {\r\n    display: inline-block;\r\n    width: 30px;\r\n  }\r\n`;\r\n\r\nconst Tools = styled.div`\r\n  text-align: center;\r\n  user-select: none;\r\n  margin: 12px 0;\r\n\r\n  > img {\r\n    cursor: pointer;\r\n    border-radius: 4px;\r\n\r\n    &:hover {\r\n      transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n      transform: translateY(1px) scale(1.1);\r\n    }\r\n  }\r\n`;\r\n\r\nconst FlowerImg = styled.img`\r\n  width: 100%;\r\n`;\r\n\r\nconst slamIn = keyframes`\r\n  0% {\r\n    opacity: 0;\r\n    transform: scale(10);\r\n  }\r\n  100% {\r\n    opacity: 1;\r\n    transform: scale(1);\r\n  }\r\n`;\r\nconst BlockImage = styled.img`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: solid 6px transparent;\r\n  box-sizing: border-box;\r\n  border-radius: 12px;\r\n  animation: ${slamIn} 0.1s 1 linear;\r\n`;\r\n\r\nconst bounceIn = keyframes`\r\n  0% {\r\n    transform: scale(0);\r\n  }\r\n\r\n  80% {\r\n    transform: scale(2);\r\n  }\r\n  100% {\r\n    transform: scale(1);\r\n  }\r\n`;\r\nconst Cell = styled.div`\r\n  display: inline-block;\r\n  width: ${cellSize}px;\r\n  height: ${cellSize}px;\r\n  background: \r\n    linear-gradient(to left, rgba(255, 255, 255, 0.25), rgba(255, 255, 255, 0.25)),\r\n    url('img/AnimalPatternColor^_D.png');\r\n  background-size: 100% 100%;\r\n  vertical-align: top;\r\n  cursor: pointer;\r\n  transition: transform 0.1s, background-size 0.1s;\r\n  background-position: center center;\r\n  background-repeat: no-repeat;\r\n\r\n  &:hover {\r\n    opacity: 0.95;\r\n  }\r\n\r\n  ${FlowerImg} {\r\n    animation: ${bounceIn} 0.1s 1;\r\n  }\r\n`;\r\n\r\nconst FieldEl = styled.div`\r\n  margin: 0 auto;\r\n  border-radius: 8px;\r\n  overflow: hidden;\r\n  user-select: none;\r\n  background: url('img/AnimalPatternColor^_D.png');\r\n  background-size: ${cellSize}px ${cellSize}px;\r\n\r\n  &:hover {\r\n    background: none;\r\n    ${Cell} {\r\n      background-size: 99% 99%;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Row = styled.div`\r\n  display: block;\r\n  height: ${cellSize}px;\r\n`;\r\n\r\nconst MinusPlusButton = styled.div`\r\n  width: 48px;\r\n  height: 48px;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border-radius: 4px;\r\n  position: relative;\r\n\r\n  &:hover {\r\n    transform: scale(1.1);\r\n  }\r\n\r\n  &:active {\r\n    transform: translateY(1px) scale(1.1);\r\n  }\r\n\r\n  &::before, &::after {\r\n    display: block;\r\n    position: absolute;\r\n    width: 24px;\r\n    height: 8px;\r\n    background: #fff;\r\n    top: 50%;\r\n    left: 50%;\r\n  }\r\n  &::before {\r\n    content: '';\r\n    transform: translateX(-50%) translateY(-50%);\r\n  }\r\n`;\r\n\r\nconst PlusButton = styled(MinusPlusButton)`\r\n  &::after {\r\n    content: '';\r\n    transform: translateX(-50%) translateY(-50%) rotateZ(90deg);\r\n  }\r\n`;\r\n\r\nexport default App;\r\n","import { FlowerNames } from \"./genes\";\r\n\r\nexport const FlowerIconPaths: { [key: number]: { [key: string]: string }} = {\r\n  [FlowerNames.windflower]: {\r\n    'white': 'img/Anemone0.png',\r\n    'red': 'img/Anemone1.png',\r\n    'orange': 'img/Anemone2.png',\r\n    'pink': 'img/Anemone3.png',\r\n    'purple': 'img/Anemone4.png',\r\n    'blue': 'img/Anemone5.png',\r\n  },\r\n  [FlowerNames.cosmos]: {\r\n    'white': 'img/Cosmos0.png',\r\n    'red': 'img/Cosmos1.png',\r\n    'yellow': 'img/Cosmos2.png',\r\n    'pink': 'img/Cosmos3.png',\r\n    'orange': 'img/Cosmos4.png',\r\n    'black': 'img/Cosmos5.png',\r\n  },\r\n  [FlowerNames.hyacinth]: {\r\n    'white': 'img/Hyacinth0.png',\r\n    'yellow': 'img/Hyacinth1.png',\r\n    'red': 'img/Hyacinth2.png',\r\n    'orange': 'img/Hyacinth3.png',\r\n    'pink': 'img/Hyacinth4.png',\r\n    'purple': 'img/Hyacinth5.png',\r\n    'blue': 'img/Hyacinth6.png',\r\n  },\r\n  [FlowerNames.mum]: {\r\n    'white': 'img/Mum0.png',\r\n    'yellow': 'img/Mum1.png',\r\n    'red': 'img/Mum2.png',\r\n    'pink': 'img/Mum3.png',\r\n    'green': 'img/Mum4.png',\r\n    'purple': 'img/Mum5.png',\r\n  },\r\n  [FlowerNames.pansy]: {\r\n    'white': 'img/Pansi0.png',\r\n    'yellow': 'img/Pansi1.png',\r\n    'red': 'img/Pansi2.png',\r\n    'purple': 'img/Pansi3.png',\r\n    'orange': 'img/Pansi4.png',\r\n    'blue': 'img/Pansi5.png',\r\n  },\r\n  [FlowerNames.rose]: {\r\n    'red': 'img/Rose0.png',\r\n    'white': 'img/Rose1.png',\r\n    'yellow': 'img/Rose2.png',\r\n    'pink': 'img/Rose3.png',\r\n    'orange': 'img/Rose4.png',\r\n    'purple': 'img/Rose5.png',\r\n    'black': 'img/Rose6.png',\r\n    'blue': 'img/Rose7.png',\r\n    'gold': 'img/GoldenRose.png',\r\n  },\r\n  [FlowerNames.tulip]: {\r\n    'red': 'img/Turip0.png',\r\n    'white': 'img/Turip1.png',\r\n    'yellow': 'img/Turip2.png',\r\n    'pink': 'img/Turip3.png',\r\n    'purple': 'img/Turip4.png',\r\n    'black': 'img/Turip5.png',\r\n    'orange': 'img/Turip6.png',\r\n  },\r\n  [FlowerNames.lily]: {\r\n    'white': 'img/Yuri0.png',\r\n    'yellow': 'img/Yuri1.png',\r\n    'red': 'img/Yuri2.png',\r\n    'orange': 'img/Yuri3.png',\r\n    'pink': 'img/Yuri4.png',\r\n    'black': 'img/Yuri5.png',\r\n  },\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}